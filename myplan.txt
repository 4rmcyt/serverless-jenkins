module.iam.data.aws_iam_policy.aws_ecs_task_execution_policy: Reading...
module.vpc.data.aws_availability_zones.available: Reading...
module.ecr.data.aws_region.current: Reading...
module.ecs.data.aws_region.current: Reading...
module.ecr.data.aws_region.current: Read complete after 0s [id=us-east-2]
module.ecs.data.aws_region.current: Read complete after 0s [id=us-east-2]
module.vpc.data.aws_availability_zones.available: Read complete after 1s [id=us-east-2]
module.iam.data.aws_iam_policy.aws_ecs_task_execution_policy: Read complete after 2s [id=arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy]

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.cloud_map.aws_service_discovery_private_dns_namespace.controller will be created
  + resource "aws_service_discovery_private_dns_namespace" "controller" {
      + arn         = (known after apply)
      + description = "Jenkins Controller DNS namespace"
      + hosted_zone = (known after apply)
      + id          = (known after apply)
      + name        = "controller.dns"
      + tags_all    = (known after apply)
      + vpc         = (known after apply)
    }

  # module.cloud_map.aws_service_discovery_service.controller will be created
  + resource "aws_service_discovery_service" "controller" {
      + arn           = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "jenkins-aws"
      + namespace_id  = (known after apply)
      + tags_all      = (known after apply)

      + dns_config {
          + namespace_id   = (known after apply)
          + routing_policy = "MULTIVALUE"

          + dns_records {
              + ttl  = 10
              + type = "A"
            }
        }

      + health_check_custom_config {
          + failure_threshold = 1
        }
    }

  # module.cloudwatch.aws_cloudwatch_log_group.jenkins_logs will be created
  + resource "aws_cloudwatch_log_group" "jenkins_logs" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + name              = "/ecs/jenkins"
      + retention_in_days = 0
      + tags              = {
          + "Name" = "jenkins-aws-logs"
        }
      + tags_all          = {
          + "Name" = "jenkins-aws-logs"
        }
    }

  # module.cloudwatch.aws_cloudwatch_log_stream.jenkins_agent_log_stream will be created
  + resource "aws_cloudwatch_log_stream" "jenkins_agent_log_stream" {
      + arn            = (known after apply)
      + id             = (known after apply)
      + log_group_name = "/ecs/jenkins"
      + name           = "jenkins-agent"
    }

  # module.cloudwatch.aws_cloudwatch_log_stream.jenkins_agent_windows_log_stream will be created
  + resource "aws_cloudwatch_log_stream" "jenkins_agent_windows_log_stream" {
      + arn            = (known after apply)
      + id             = (known after apply)
      + log_group_name = "/ecs/jenkins"
      + name           = "jenkins-agent-windows"
    }


  # module.cloudwatch.aws_cloudwatch_log_stream.jenkins_controller_log_stream will be created
  + resource "aws_cloudwatch_log_stream" "jenkins_controller_log_stream" {
      + arn            = (known after apply)
      + id             = (known after apply)
      + log_group_name = "/ecs/jenkins"
      + name           = "jenkins-controller"
    }

  # module.ecr.aws_ecr_repository.jenkins_agent_repo will be created
  + resource "aws_ecr_repository" "jenkins_agent_repo" {
      + arn                  = (known after apply)
      + id                   = (known after apply)
      + image_tag_mutability = "MUTABLE"
      + name                 = "jenkins-agent"
      + registry_id          = (known after apply)
      + repository_url       = (known after apply)
      + tags_all             = (known after apply)
    }

    # module.ecr.aws_ecr_repository.jenkins_agent_windows_repo will be created
  + resource "aws_ecr_repository" "jenkins_agent_windows_repo" {
      + arn                  = (known after apply)
      + id                   = (known after apply)
      + image_tag_mutability = "MUTABLE"
      + name                 = "jenkins-agent-windows"
      + registry_id          = (known after apply)
      + repository_url       = (known after apply)
      + tags_all             = (known after apply)
    } 

  # module.ecr.aws_ecr_repository.jenkins_controller_repo will be created
  + resource "aws_ecr_repository" "jenkins_controller_repo" {
      + arn                  = (known after apply)
      + id                   = (known after apply)
      + image_tag_mutability = "MUTABLE"
      + name                 = "jenkins-controller"
      + registry_id          = (known after apply)
      + repository_url       = (known after apply)
      + tags_all             = (known after apply)
    }

  # module.ecr.local_file.jenkins_config will be created
  + resource "local_file" "jenkins_config" {
      + content              = (known after apply)
      + directory_permission = "0777"
      + file_permission      = "0777"
      + filename             = "modules/ecr/../docker/jenkins_controller/jenkins.yaml"
      + id                   = (known after apply)
    }

  # module.ecr.null_resource.build_and_push_image_jenkins_agent will be created
  + resource "null_resource" "build_and_push_image_jenkins_agent" {
      + id = (known after apply)
    }

  # module.ecr.null_resource.build_and_push_image_jenkins_agent_windows will be created
  + resource "null_resource" "build_and_push_image_jenkins_agent_windows" {
      + id = (known after apply)
    }

  # module.ecr.null_resource.build_and_push_image_jenkins_controller will be created
  + resource "null_resource" "build_and_push_image_jenkins_controller" {
      + id = (known after apply)
    }

  # module.ecs.aws_ecs_cluster.agents will be created
  + resource "aws_ecs_cluster" "agents" {
      + arn                = (known after apply)
      + capacity_providers = (known after apply)
      + id                 = (known after apply)
      + name               = "jenkins-aws-agents"
      + tags_all           = (known after apply)
    }

  # module.ecs.aws_ecs_cluster.agents_windows will be created
  + resource "aws_ecs_cluster" "agents-windows" {
      + arn                = (known after apply)
      + capacity_providers = (known after apply)
      + id                 = (known after apply)
      + name               = "jenkins-aws-agents-windows"
      + tags_all           = (known after apply)
    }

  # module.ecs.aws_ecs_cluster.controller will be created
  + resource "aws_ecs_cluster" "controller" {
      + arn                = (known after apply)
      + capacity_providers = (known after apply)
      + id                 = (known after apply)
      + name               = "jenkins-aws-controller"
      + tags_all           = (known after apply)
    }

  # module.ecs.aws_ecs_cluster_capacity_providers.agents will be created
  + resource "aws_ecs_cluster_capacity_providers" "agents" {
      + capacity_providers = [
          + "FARGATE_SPOT",
        ]
      + cluster_name       = "jenkins-aws-agents"
      + id                 = (known after apply)

      + default_capacity_provider_strategy {
          + base              = 1
          + capacity_provider = "FARGATE_SPOT"
          + weight            = 100
        }
    }

  # module.ecs.aws_ecs_cluster_capacity_providers.agents_windows will be created
  + resource "aws_ecs_cluster_capacity_providers" "agents-windows" {
      + capacity_providers = [
          + "FARGATE_SPOT",
        ]
      + cluster_name       = "jenkins-aws-agents-windows"
      + id                 = (known after apply)

      + default_capacity_provider_strategy {
          + base              = 1
          + capacity_provider = "FARGATE_SPOT"
          + weight            = 100
        }
    }
  
  # module.ecs.aws_ecs_cluster_capacity_providers.controller will be created
  + resource "aws_ecs_cluster_capacity_providers" "controller" {
      + capacity_providers = [
          + "FARGATE",
        ]
      + cluster_name       = "jenkins-aws-controller"
      + id                 = (known after apply)

      + default_capacity_provider_strategy {
          + base              = 1
          + capacity_provider = "FARGATE"
          + weight            = 100
        }
    }

  # module.ecs.aws_ecs_service.jenkins will be created
  + resource "aws_ecs_service" "jenkins" {
      + cluster                            = (known after apply)
      + deployment_maximum_percent         = 100
      + deployment_minimum_healthy_percent = 0
      + desired_count                      = 1
      + enable_ecs_managed_tags            = false
      + enable_execute_command             = false
      + iam_role                           = (known after apply)
      + id                                 = (known after apply)
      + launch_type                        = "FARGATE"
      + name                               = "jenkins"
      + platform_version                   = (known after apply)
      + scheduling_strategy                = "REPLICA"
      + tags_all                           = (known after apply)
      + task_definition                    = (known after apply)
      + wait_for_steady_state              = false

      + load_balancer {
          + container_name   = "jenkins-aws"
          + container_port   = 8080
          + target_group_arn = (known after apply)
        }

      + network_configuration {
          + assign_public_ip = false
          + security_groups  = (known after apply)
          + subnets          = (known after apply)
        }

      + service_registries {
          + registry_arn = (known after apply)
        }
    }

  # module.ecs.aws_ecs_task_definition.jenkins_td will be created
  + resource "aws_ecs_task_definition" "jenkins_td" {
      + arn                      = (known after apply)
      + container_definitions    = (known after apply)
      + cpu                      = "256"
      + execution_role_arn       = (known after apply)
      + family                   = "jenkins-aws"
      + id                       = (known after apply)
      + memory                   = "512"
      + network_mode             = "awsvpc"
      + requires_compatibilities = [
          + "FARGATE",
        ]
      + revision                 = (known after apply)
      + skip_destroy             = false
      + tags_all                 = (known after apply)
      + task_role_arn            = (known after apply)

      + volume {
          + name = "jenkins-aws-efs"

          + efs_volume_configuration {
              + file_system_id     = (known after apply)
              + root_directory     = "/var/jenkins_home"
              + transit_encryption = "ENABLED"

              + authorization_config {
                  + access_point_id = (known after apply)
                  + iam             = "ENABLED"
                }
            }
        }
    }

  # module.efs.aws_efs_access_point.efs_ap will be created
  + resource "aws_efs_access_point" "efs_ap" {
      + arn             = (known after apply)
      + file_system_arn = (known after apply)
      + file_system_id  = (known after apply)
      + id              = (known after apply)
      + owner_id        = (known after apply)
      + tags            = {
          + "Name" = "jenkins-aws-efs-ap"
        }
      + tags_all        = {
          + "Name" = "jenkins-aws-efs-ap"
        }

      + posix_user {
          + gid = 0
          + uid = 0
        }

      + root_directory {
          + path = "/var/jenkins_home"

          + creation_info {
              + owner_gid   = 1000
              + owner_uid   = 1000
              + permissions = "0755"
            }
        }
    }

  # module.efs.aws_efs_file_system.efs will be created
  + resource "aws_efs_file_system" "efs" {
      + arn                     = (known after apply)
      + availability_zone_id    = (known after apply)
      + availability_zone_name  = (known after apply)
      + creation_token          = "jenkins-aws-efs"
      + dns_name                = (known after apply)
      + encrypted               = true
      + id                      = (known after apply)
      + kms_key_id              = (known after apply)
      + number_of_mount_targets = (known after apply)
      + owner_id                = (known after apply)
      + performance_mode        = (known after apply)
      + size_in_bytes           = (known after apply)
      + tags                    = {
          + "Name" = "jenkins-aws-efs"
        }
      + tags_all                = {
          + "Name" = "jenkins-aws-efs"
        }
      + throughput_mode         = "bursting"
    }

  # module.efs.aws_efs_mount_target.storage[0] will be created
  + resource "aws_efs_mount_target" "storage" {
      + availability_zone_id   = (known after apply)
      + availability_zone_name = (known after apply)
      + dns_name               = (known after apply)
      + file_system_arn        = (known after apply)
      + file_system_id         = (known after apply)
      + id                     = (known after apply)
      + ip_address             = (known after apply)
      + mount_target_dns_name  = (known after apply)
      + network_interface_id   = (known after apply)
      + owner_id               = (known after apply)
      + security_groups        = (known after apply)
      + subnet_id              = (known after apply)
    }

  # module.efs.aws_efs_mount_target.storage[1] will be created
  + resource "aws_efs_mount_target" "storage" {
      + availability_zone_id   = (known after apply)
      + availability_zone_name = (known after apply)
      + dns_name               = (known after apply)
      + file_system_arn        = (known after apply)
      + file_system_id         = (known after apply)
      + id                     = (known after apply)
      + ip_address             = (known after apply)
      + mount_target_dns_name  = (known after apply)
      + network_interface_id   = (known after apply)
      + owner_id               = (known after apply)
      + security_groups        = (known after apply)
      + subnet_id              = (known after apply)
    }

  # module.elb.aws_lb.alb will be created
  + resource "aws_lb" "alb" {
      + arn                        = (known after apply)
      + arn_suffix                 = (known after apply)
      + desync_mitigation_mode     = "defensive"
      + dns_name                   = (known after apply)
      + drop_invalid_header_fields = false
      + enable_deletion_protection = false
      + enable_http2               = true
      + enable_waf_fail_open       = false
      + id                         = (known after apply)
      + idle_timeout               = 60
      + internal                   = false
      + ip_address_type            = (known after apply)
      + load_balancer_type         = "application"
      + name                       = "jenkins-aws-alb"
      + security_groups            = (known after apply)
      + subnets                    = (known after apply)
      + tags                       = {
          + "Name" = "jenkins-aws-alb"
        }
      + tags_all                   = {
          + "Name" = "jenkins-aws-alb"
        }
      + vpc_id                     = (known after apply)
      + zone_id                    = (known after apply)
    }

  # module.elb.aws_lb_listener.http will be created
  + resource "aws_lb_listener" "http" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + load_balancer_arn = (known after apply)
      + port              = 80
      + protocol          = "HTTP"
      + ssl_policy        = (known after apply)
      + tags_all          = (known after apply)

      + default_action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }
    }

  # module.elb.aws_lb_target_group.tg will be created
  + resource "aws_lb_target_group" "tg" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + connection_termination             = false
      + deregistration_delay               = "300"
      + id                                 = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancing_algorithm_type      = (known after apply)
      + name                               = "jenkins-aws-tg"
      + port                               = 80
      + preserve_client_ip                 = (known after apply)
      + protocol                           = "HTTP"
      + protocol_version                   = (known after apply)
      + proxy_protocol_v2                  = false
      + slow_start                         = 0
      + tags                               = {
          + "Name" = "jenkins-aws-tg"
        }
      + tags_all                           = {
          + "Name" = "jenkins-aws-tg"
        }
      + target_type                        = "ip"
      + vpc_id                             = (known after apply)

      + health_check {
          + enabled             = true
          + healthy_threshold   = 3
          + interval            = 300
          + matcher             = (known after apply)
          + path                = "/login"
          + port                = "traffic-port"
          + protocol            = "HTTP"
          + timeout             = (known after apply)
          + unhealthy_threshold = 3
        }
    }

  # module.iam.aws_iam_policy.jenkins_policy will be created
  + resource "aws_iam_policy" "jenkins_policy" {
      + arn       = (known after apply)
      + id        = (known after apply)
      + name      = "jenkinsPolicy"
      + path      = "/"
      + policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "ecs:ListClusters",
                          + "ecs:ListTaskDefinitions",
                          + "ecs:ListContainerInstances",
                          + "ecs:RunTask",
                          + "ecs:StopTask",
                          + "ecs:DescribeTasks",
                          + "ecs:DescribeContainerInstances",
                          + "ecs:DescribeTaskDefinition",
                          + "ecs:RegisterTaskDefinition",
                          + "ecs:DeregisterTaskDefinition",
                          + "iam:GetRole",
                          + "iam:PassRole",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                      + Sid      = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + policy_id = (known after apply)
      + tags_all  = (known after apply)
    }

  # module.iam.aws_iam_role.jenkinsExecutionRole will be created
  + resource "aws_iam_role" "jenkinsExecutionRole" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ecs-tasks.amazonaws.com"
                        }
                      + Sid       = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "jenkinsExecutionRole"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)
    }

  # module.security_groups.aws_security_group.jenkins_agents will be created
  + resource "aws_security_group" "jenkins_agents" {
      + arn                    = (known after apply)
      + description            = "Security group for the Jenkins agents"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Allow all outbound traffic"
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = "jenkins-agents"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "jenkins-aws-jenkins-agents"
        }
      + tags_all               = {
          + "Name" = "jenkins-aws-jenkins-agents"
        }
      + vpc_id                 = (known after apply)
    }

    # module.security_groups.aws_security_group.jenkins_agents_windows will be created
  + resource "aws_security_group" "jenkins_agents_windows" {
      + arn                    = (known after apply)
      + description            = "Security group for the Jenkins agents windows"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Allow all outbound traffic"
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = "jenkins-agents-windows"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "jenkins-aws-jenkins-agents-windows"
        }
      + tags_all               = {
          + "Name" = "jenkins-aws-jenkins-agents-windows"
        }
      + vpc_id                 = (known after apply)
    }

  # module.security_groups.aws_security_group.jenkins_alb will be created
  + resource "aws_security_group" "jenkins_alb" {
      + arn                    = (known after apply)
      + description            = "Security group for the ALB that points to the Jenkins master"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Allow all outbound traffic"
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Allow all traffic through port 80"
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
        ]
      + name                   = "jenkins-alb"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "jenkins-aws-jenkins-alb"
        }
      + tags_all               = {
          + "Name" = "jenkins-aws-jenkins-alb"
        }
      + vpc_id                 = (known after apply)
    }

  # module.security_groups.aws_security_group.jenkins_controller will be created
  + resource "aws_security_group" "jenkins_controller" {
      + arn                    = (known after apply)
      + description            = "Security group for the Jenkins master"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Allow all outbound traffic"
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = []
              + description      = "Allow traffic from VPC endpoints"
              + from_port        = 443
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = (known after apply)
              + self             = false
              + to_port          = 443
            },
          + {
              + cidr_blocks      = []
              + description      = "Allow traffic from the ALB"
              + from_port        = 8080
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = (known after apply)
              + self             = false
              + to_port          = 8080
            },
          + {
              + cidr_blocks      = []
              + description      = "Allow traffic from the Jenkins agents over JNLP"
              + from_port        = 50000
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = (known after apply)
              + self             = false
              + to_port          = 50000
            },
          + {
              + cidr_blocks      = []
              + description      = "Allow traffic from the Jenkins agents"
              + from_port        = 8080
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = (known after apply)
              + self             = false
              + to_port          = 8080
            },
        ]
      + name                   = "jenkins-controller"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "jenkins-aws-jenkins-controller"
        }
      + tags_all               = {
          + "Name" = "jenkins-aws-jenkins-controller"
        }
      + vpc_id                 = (known after apply)
    }

  # module.security_groups.aws_security_group.jenkins_efs will be created
  + resource "aws_security_group" "jenkins_efs" {
      + arn                    = (known after apply)
      + description            = "Security group for the EFS of the Jenkins controller"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Allow all outbound traffic"
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = []
              + description      = "Allow traffic from the Jenkins controller"
              + from_port        = 2049
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = (known after apply)
              + self             = false
              + to_port          = 2049
            },
        ]
      + name                   = "jenkins-efs"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "jenkins-aws-jenkins-efs"
        }
      + tags_all               = {
          + "Name" = "jenkins-aws-jenkins-efs"
        }
      + vpc_id                 = (known after apply)
    }

  # module.security_groups.aws_security_group.vpc_endpoints will be created
  + resource "aws_security_group" "vpc_endpoints" {
      + arn                    = (known after apply)
      + description            = "SG for VPC Endpoints"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Allow all outbound traffic"
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Allow HTTPS traffic"
              + from_port        = 443
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 443
            },
        ]
      + name                   = "vpc-endpoints"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "jenkins-aws-vpc-endpoints"
        }
      + tags_all               = {
          + "Name" = "jenkins-aws-vpc-endpoints"
        }
      + vpc_id                 = (known after apply)
    }

  # module.vpc.aws_eip.nat_gateway_eip will be created
  + resource "aws_eip" "nat_gateway_eip" {
      + allocation_id        = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = (known after apply)
      + id                   = (known after apply)
      + instance             = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags                 = {
          + "Name" = "jenkins-aws-eip"
        }
      + tags_all             = {
          + "Name" = "jenkins-aws-eip"
        }
      + vpc                  = true
    }

  # module.vpc.aws_internet_gateway.igw will be created
  + resource "aws_internet_gateway" "igw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name" = "jenkins-aws-igw"
        }
      + tags_all = {
          + "Name" = "jenkins-aws-igw"
        }
      + vpc_id   = (known after apply)
    }

  # module.vpc.aws_nat_gateway.nat_gateway will be created
  + resource "aws_nat_gateway" "nat_gateway" {
      + allocation_id        = (known after apply)
      + connectivity_type    = "public"
      + id                   = (known after apply)
      + network_interface_id = (known after apply)
      + private_ip           = (known after apply)
      + public_ip            = (known after apply)
      + subnet_id            = (known after apply)
      + tags                 = {
          + "Name" = "jenkins-aws-nat-gateway"
        }
      + tags_all             = {
          + "Name" = "jenkins-aws-nat-gateway"
        }
    }

  # module.vpc.aws_route_table.private_rt will be created
  + resource "aws_route_table" "private_rt" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + carrier_gateway_id         = ""
              + cidr_block                 = "0.0.0.0/0"
              + core_network_arn           = ""
              + destination_prefix_list_id = ""
              + egress_only_gateway_id     = ""
              + gateway_id                 = ""
              + instance_id                = ""
              + ipv6_cidr_block            = ""
              + local_gateway_id           = ""
              + nat_gateway_id             = (known after apply)
              + network_interface_id       = ""
              + transit_gateway_id         = ""
              + vpc_endpoint_id            = ""
              + vpc_peering_connection_id  = ""
            },
        ]
      + tags             = {
          + "Name" = "jenkins-aws-private-rt"
        }
      + tags_all         = {
          + "Name" = "jenkins-aws-private-rt"
        }
      + vpc_id           = (known after apply)
    }

  # module.vpc.aws_route_table.public_rt will be created
  + resource "aws_route_table" "public_rt" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + carrier_gateway_id         = ""
              + cidr_block                 = "0.0.0.0/0"
              + core_network_arn           = ""
              + destination_prefix_list_id = ""
              + egress_only_gateway_id     = ""
              + gateway_id                 = (known after apply)
              + instance_id                = ""
              + ipv6_cidr_block            = ""
              + local_gateway_id           = ""
              + nat_gateway_id             = ""
              + network_interface_id       = ""
              + transit_gateway_id         = ""
              + vpc_endpoint_id            = ""
              + vpc_peering_connection_id  = ""
            },
        ]
      + tags             = {
          + "Name" = "jenkins-aws-public-rt"
        }
      + tags_all         = {
          + "Name" = "jenkins-aws-public-rt"
        }
      + vpc_id           = (known after apply)
    }

  # module.vpc.aws_route_table_association.private[0] will be created
  + resource "aws_route_table_association" "private" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.private[1] will be created
  + resource "aws_route_table_association" "private" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.public[0] will be created
  + resource "aws_route_table_association" "public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.public[1] will be created
  + resource "aws_route_table_association" "public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_subnet.private_subnet[0] will be created
  + resource "aws_subnet" "private_subnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-2a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.101.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "jenkins-aws-private-subnet-01"
        }
      + tags_all                                       = {
          + "Name" = "jenkins-aws-private-subnet-01"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.private_subnet[1] will be created
  + resource "aws_subnet" "private_subnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-2b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.102.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "jenkins-aws-private-subnet-02"
        }
      + tags_all                                       = {
          + "Name" = "jenkins-aws-private-subnet-02"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.public_subnet[0] will be created
  + resource "aws_subnet" "public_subnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-2a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "jenkins-aws-public-subnet-01"
        }
      + tags_all                                       = {
          + "Name" = "jenkins-aws-public-subnet-01"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.public_subnet[1] will be created
  + resource "aws_subnet" "public_subnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-2b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "jenkins-aws-public-subnet-02"
        }
      + tags_all                                       = {
          + "Name" = "jenkins-aws-public-subnet-02"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_vpc.vpc will be created
  + resource "aws_vpc" "vpc" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_classiclink                   = (known after apply)
      + enable_classiclink_dns_support       = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name" = "jenkins-aws-vpc"
        }
      + tags_all                             = {
          + "Name" = "jenkins-aws-vpc"
        }
    }

  # module.vpc.aws_vpc_endpoint.endpoint[0] will be created
  + resource "aws_vpc_endpoint" "endpoint" {
      + arn                   = (known after apply)
      + cidr_blocks           = (known after apply)
      + dns_entry             = (known after apply)
      + id                    = (known after apply)
      + network_interface_ids = (known after apply)
      + owner_id              = (known after apply)
      + policy                = (known after apply)
      + prefix_list_id        = (known after apply)
      + private_dns_enabled   = true
      + requester_managed     = (known after apply)
      + route_table_ids       = (known after apply)
      + security_group_ids    = (known after apply)
      + service_name          = "com.amazonaws.us-east-2.sts"
      + state                 = (known after apply)
      + subnet_ids            = (known after apply)
      + tags                  = {
          + "Name" = "jenkins-aws-.-endpoint"
        }
      + tags_all              = {
          + "Name" = "jenkins-aws-.-endpoint"
        }
      + vpc_endpoint_type     = "Interface"
      + vpc_id                = (known after apply)
    }

  # module.vpc.aws_vpc_endpoint.endpoint[1] will be created
  + resource "aws_vpc_endpoint" "endpoint" {
      + arn                   = (known after apply)
      + cidr_blocks           = (known after apply)
      + dns_entry             = (known after apply)
      + id                    = (known after apply)
      + network_interface_ids = (known after apply)
      + owner_id              = (known after apply)
      + policy                = (known after apply)
      + prefix_list_id        = (known after apply)
      + private_dns_enabled   = true
      + requester_managed     = (known after apply)
      + route_table_ids       = (known after apply)
      + security_group_ids    = (known after apply)
      + service_name          = "com.amazonaws.us-east-2.ecr.api"
      + state                 = (known after apply)
      + subnet_ids            = (known after apply)
      + tags                  = {
          + "Name" = "jenkins-aws-.-endpoint"
        }
      + tags_all              = {
          + "Name" = "jenkins-aws-.-endpoint"
        }
      + vpc_endpoint_type     = "Interface"
      + vpc_id                = (known after apply)
    }

  # module.vpc.aws_vpc_endpoint.endpoint[2] will be created
  + resource "aws_vpc_endpoint" "endpoint" {
      + arn                   = (known after apply)
      + cidr_blocks           = (known after apply)
      + dns_entry             = (known after apply)
      + id                    = (known after apply)
      + network_interface_ids = (known after apply)
      + owner_id              = (known after apply)
      + policy                = (known after apply)
      + prefix_list_id        = (known after apply)
      + private_dns_enabled   = true
      + requester_managed     = (known after apply)
      + route_table_ids       = (known after apply)
      + security_group_ids    = (known after apply)
      + service_name          = "com.amazonaws.us-east-2.ecr.dkr"
      + state                 = (known after apply)
      + subnet_ids            = (known after apply)
      + tags                  = {
          + "Name" = "jenkins-aws-.-endpoint"
        }
      + tags_all              = {
          + "Name" = "jenkins-aws-.-endpoint"
        }
      + vpc_endpoint_type     = "Interface"
      + vpc_id                = (known after apply)
    }

  # module.vpc.aws_vpc_endpoint.endpoint[3] will be created
  + resource "aws_vpc_endpoint" "endpoint" {
      + arn                   = (known after apply)
      + cidr_blocks           = (known after apply)
      + dns_entry             = (known after apply)
      + id                    = (known after apply)
      + network_interface_ids = (known after apply)
      + owner_id              = (known after apply)
      + policy                = (known after apply)
      + prefix_list_id        = (known after apply)
      + private_dns_enabled   = true
      + requester_managed     = (known after apply)
      + route_table_ids       = (known after apply)
      + security_group_ids    = (known after apply)
      + service_name          = "com.amazonaws.us-east-2.logs"
      + state                 = (known after apply)
      + subnet_ids            = (known after apply)
      + tags                  = {
          + "Name" = "jenkins-aws-.-endpoint"
        }
      + tags_all              = {
          + "Name" = "jenkins-aws-.-endpoint"
        }
      + vpc_endpoint_type     = "Interface"
      + vpc_id                = (known after apply)
    }

  # module.vpc.aws_vpc_endpoint.endpoint[4] will be created
  + resource "aws_vpc_endpoint" "endpoint" {
      + arn                   = (known after apply)
      + cidr_blocks           = (known after apply)
      + dns_entry             = (known after apply)
      + id                    = (known after apply)
      + network_interface_ids = (known after apply)
      + owner_id              = (known after apply)
      + policy                = (known after apply)
      + prefix_list_id        = (known after apply)
      + private_dns_enabled   = true
      + requester_managed     = (known after apply)
      + route_table_ids       = (known after apply)
      + security_group_ids    = (known after apply)
      + service_name          = "com.amazonaws.us-east-2.ecs"
      + state                 = (known after apply)
      + subnet_ids            = (known after apply)
      + tags                  = {
          + "Name" = "jenkins-aws-.-endpoint"
        }
      + tags_all              = {
          + "Name" = "jenkins-aws-.-endpoint"
        }
      + vpc_endpoint_type     = "Interface"
      + vpc_id                = (known after apply)
    }

  # module.vpc.aws_vpc_endpoint.s3 will be created
  + resource "aws_vpc_endpoint" "s3" {
      + arn                   = (known after apply)
      + cidr_blocks           = (known after apply)
      + dns_entry             = (known after apply)
      + id                    = (known after apply)
      + network_interface_ids = (known after apply)
      + owner_id              = (known after apply)
      + policy                = (known after apply)
      + prefix_list_id        = (known after apply)
      + private_dns_enabled   = false
      + requester_managed     = (known after apply)
      + route_table_ids       = (known after apply)
      + security_group_ids    = (known after apply)
      + service_name          = "com.amazonaws.us-east-2.s3"
      + state                 = (known after apply)
      + subnet_ids            = (known after apply)
      + tags                  = {
          + "Name" = "jenkins-aws-s3-endpoint"
        }
      + tags_all              = {
          + "Name" = "jenkins-aws-s3-endpoint"
        }
      + vpc_endpoint_type     = "Gateway"
      + vpc_id                = (known after apply)
    }

  # module.vpc.aws_vpc_endpoint_route_table_association.s3_endpoint will be created
  + resource "aws_vpc_endpoint_route_table_association" "s3_endpoint" {
      + id              = (known after apply)
      + route_table_id  = (known after apply)
      + vpc_endpoint_id = (known after apply)
    }

Plan: 51 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + jenkins_alb_dns = (known after apply)

─────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
